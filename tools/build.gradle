plugins {
  id 'lucene-in-action-config'
}

dependencies {
  testImplementation project(':analysis')
  implementation project(':common')
  implementation libs.lucene.highlighter
  implementation libs.lucene.suggest
}

tasks.register('createSpellCheckerIndex', JavaExec) {
  dependsOn(['classes', ':meetlucene:indexer'])
  mainClass = 'lia.CreateSpellCheckerIndex'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ["--enable-native-access=ALL-UNNAMED", "--add-modules", "jdk.incubator.vector"]
  args "${getRootDir()}/spellIndex", "${getRootDir()}/index/", project.hasProperty("field") ? project.getProperties().get("field") : "contents"
}

tasks.register('spellCheckerExample', JavaExec) {
  dependsOn(['classes', 'createSpellCheckerIndex'])
  mainClass = 'lia.SpellCheckerExample'
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ["--enable-native-access=ALL-UNNAMED", "--add-modules", "jdk.incubator.vector"]
  args "${getRootDir()}/spellIndex", project.hasProperty("word") ? project.getProperties().get("word") : "frie"
}

tasks.register('ngramFilter', JavaExec) {
  mainClass = 'lia.NGramFilterSample'
  classpath = sourceSets.main.runtimeClasspath
  args project.hasProperty("word") ? project.getProperties().get("word") : "lettuce"
}

tasks.register('highlight', JavaExec) {
  mainClass = 'lia.HighlightIt'
  classpath = sourceSets.main.runtimeClasspath
  args project.hasProperty("word") ? project.getProperties().get("word") : "term"
}

tasks.register('fastVectorHighlight', JavaExec) {
  mainClass = 'lia.FastVectorHighlighterSample'
  classpath = sourceSets.main.runtimeClasspath
}
